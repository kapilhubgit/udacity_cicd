# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  #say-hello:
  #  # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  #  # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
  #  docker:
  #    - image: cimg/base:stable
  #  # Add steps to the job
  #  # See: https://circleci.com/docs/2.0/configuration-reference/#steps
  #  steps:
  #    - checkout
  #    - run:
  #        name: "Say hello"
  #        command: "echo Hello, World!"
  #        
  #print_hello:
  #  docker:
  #      - image: circleci/node:13.8.0
  #  steps:
  #    - run:
  #        name: "Print Hello"
  #        command: "echo Hello"
  # 
  #print_world:
  #  docker:
  #      - image: circleci/node:13.8.0
  #  steps:
  #    - run:
  #        name: "Print World"
  #        command: "echo World"
  #        
  #print_my_name:
  #  docker:
  #      - image: circleci/node:13.8.0
  #  steps:
  #    - run:
  #        name: "Print my name"
  #        command: "echo  my name is $MY_NAME_VAR"
  
  #2nd activity
  save_hello_world_output:
     docker:
         - image: circleci/node:13.8.0
     steps:
        - run:
            name: "Save a file"
            command: "echo Hello Kail > /tmp/workspace/output.txt"  
        - persist_to_workspace:
            root: /tmp/workspace
            paths:
                - output.txt
  print_output_file:
     docker:
         - image: circleci/node:13.8.0
     steps:
        - run:
            name: "Print file"
            command: "cat /tmp/workspace/output.txt"  
        - attach_workspace:
            at: /tmp/workspace

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
  #    #- say-hello
  #    - print_hello
  #    - print_world:
  #          requires:
  #              - print_hello
  #    - print_my_name:
  #          requires:
  #              - print_world
  
       - save_hello_world_output
       - print_output_file:  
            requires:
                - save_hello_world_output
            
